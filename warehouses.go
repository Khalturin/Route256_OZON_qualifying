package main

import (
	"fmt"
	"sort"
)

/*
Условия
	Компания-застройщик занимается строительством недвижимости промышленного назначения, а именно – складских помещений.
	Каждый квадратный метр площади стоит L рублей. Компания имеет достаточный запас оборотных средств, чтобы продавать
		построенные помещения не сразу после завершения строительства, а в тот момент, когда ей это выгодно. Рынок
		недвижимости очень динамичный, поэтому цена квадратного метра меняется каждый день.
	Аналитики застройщика смогли точно спрогнозировать цену на ближайшие N дней (пронумеруем дни в хронологическом
		порядке от 0 до N-1). Теперь требуется определить, в какие из этих дней нужно продавать, чтобы по истечению N
		дней заработать как можно больше денег.
	Известно, что стройка новых площадей происходит с равномерной скоростью S кв. метров в сутки. А к 0-му дню объем
		построенной площади составлял S кв. метров, при том что S = 1
Формат входных данных
	В первой строке вводится одно целое число N (0 < N < 10000) - кол-во дней
	Во второй строке вводится последовательность из N целых положительных чисел - цена квадратного метра складской
	площади	в каждый из дней.
Формат выходных данных
	Вывести одно число - максимальное кол-во денег, которое может заработать компания-застройщик.


*/
func main() {
	n := 0
	fmt.Scan(&n)
	prices := make([]int, n, n)

	prices[0] = 81
	prices[1] = 22
	prices[2] = 31
	prices[3] = 44
	prices[4] = 41
	prices[5] = 78
	prices[6] = 98

	//prices[0] = 81
	//prices[1] = 14
	//prices[2] = 88
	//prices[3] = 2
	//prices[4] = 22
	//308

	//prices[0] = 81
	//prices[1] = 14
	//prices[2] = 88 //264
	//prices[3] = 2
	//prices[4] = 3
	//prices[5] = 22 // 330
	//330

	m := make(map[int]int)
	for i, val := range prices {
		m[val] = i
	}
	vals := make([]int, 0, len(m))
	for i, _ := range m {
		vals = append(vals, i)
	}
	sort.Sort(sort.Reverse(sort.IntSlice(vals)))

	lastVal := -1
	res := 0
	for _, val := range vals {
		if m[val] > lastVal {
			if lastVal == -1 {
				res += (m[val] + 1) * val
			} else {
				res += (m[val] - lastVal) * val
			}
			lastVal = m[val]
		}

	}

	fmt.Println(res)
}
